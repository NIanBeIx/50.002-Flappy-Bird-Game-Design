module addition (
    input a[16],
    input b[16],
    input alufn0,
    output sum[16]
  ) {

  sig cout[16];
  always {
    cout[0]=alufn0;
    sum[0]=a[0]^b[0]^cout[0];
    cout[1] = ((a[0]^b[0])&cout[0] | a[0]&b[0]);
    sum[1] = a[1]^b[1]^cout[1];
    cout[2] = ((a[1]^b[1])&cout[1] | a[1]&b[1]);
    sum[2] = a[2]^b[2]^cout[2];
    cout[3] = ((a[2]^b[2])&cout[2] | a[2]&b[2]);
    sum[3] = a[3]^b[3]^cout[3];
    cout[4] = ((a[3]^b[3])&cout[3] | a[3]&b[3]);
    sum[4] = a[4]^b[4]^cout[4];
    cout[5] = ((a[4]^b[4])&cout[4] | a[4]&b[4]);
    sum[5] = a[5]^b[5]^cout[5];
    cout[6] = ((a[5]^b[5])&cout[5] | a[5]&b[5]);
    sum[6] = a[6]^b[6]^cout[6];
    cout[7] = ((a[6]^b[6])&cout[6] | a[6]&b[6]);
    sum[7] = a[7]^b[7]^cout[7];
    cout[8] = ((a[6]^b[6])&cout[6] | a[7]&b[7]);
    sum[8] = a[8]^b[8]^cout[8];
    cout[9] = ((a[8]^b[8])&cout[8] | a[8]&b[8]);
    sum[9] = a[9]^b[9]^cout[9];
    cout[10] = ((a[9]^b[9])&cout[9] | a[9]&b[9]);
    sum[10] = a[10]^b[10]^cout[10];
    cout[11] = ((a[10]^b[10])&cout[10] | a[10]&b[10]);
    sum[11] = a[11]^b[11]^cout[11];
    cout[12] = ((a[11]^b[11])&cout[11] | a[11]&b[11]);
    sum[12] = a[12]^b[12]^cout[12];
    cout[13] = ((a[12]^b[12])&cout[12] | a[12]&b[12]);
    sum[13] = a[13]^b[13]^cout[13];
    cout[14] = ((a[13]^b[13])&cout[13] | a[13]&b[13]);
    sum[14] = a[14]^b[14]^cout[14];
    cout[15] = ((a[14]^b[14])&cout[14] | a[14]&b[14]);
    sum[15] = a[15]^b[15]^cout[15];
  }
}
