/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_3 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] out,
    output reg overflow
  );
  
  
  
  reg [0:0] z;
  
  reg [0:0] voverflow;
  
  reg [0:0] v;
  
  reg [0:0] n;
  
  wire [16-1:0] M_add_out;
  wire [1-1:0] M_add_n;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  reg [3-1:0] M_add_alufn20;
  reg [16-1:0] M_add_a;
  reg [16-1:0] M_add_b;
  adder_13 add (
    .alufn20(M_add_alufn20),
    .a(M_add_a),
    .b(M_add_b),
    .out(M_add_out),
    .n(M_add_n),
    .z(M_add_z),
    .v(M_add_v)
  );
  
  wire [16-1:0] M_bool_out;
  reg [4-1:0] M_bool_alufn30;
  reg [16-1:0] M_bool_a;
  reg [16-1:0] M_bool_b;
  boolean_14 bool (
    .alufn30(M_bool_alufn30),
    .a(M_bool_a),
    .b(M_bool_b),
    .out(M_bool_out)
  );
  
  wire [16-1:0] M_comp_out;
  reg [2-1:0] M_comp_alufn21;
  reg [1-1:0] M_comp_z;
  reg [1-1:0] M_comp_v;
  reg [1-1:0] M_comp_n;
  compare_15 comp (
    .alufn21(M_comp_alufn21),
    .z(M_comp_z),
    .v(M_comp_v),
    .n(M_comp_n),
    .out(M_comp_out)
  );
  
  wire [16-1:0] M_shi_out;
  reg [2-1:0] M_shi_alufn10;
  reg [16-1:0] M_shi_a;
  reg [4-1:0] M_shi_b;
  shift_16 shi (
    .alufn10(M_shi_alufn10),
    .a(M_shi_a),
    .b(M_shi_b),
    .out(M_shi_out)
  );
  
  always @* begin
    out = 1'h0;
    M_add_a = a;
    M_add_b = b;
    voverflow = M_add_v;
    v = M_add_v;
    n = M_add_n;
    z = M_add_z;
    M_add_alufn20 = alufn[0+2-:3];
    overflow = M_add_v;
    M_bool_a = a;
    M_bool_b = b;
    M_bool_alufn30 = alufn[0+3-:4];
    M_comp_alufn21 = alufn[1+1-:2];
    M_comp_v = v;
    M_comp_z = z;
    M_comp_n = n;
    M_shi_a = a;
    M_shi_b = b[0+3-:4];
    M_shi_alufn10 = alufn[0+1-:2];
    
    case (alufn[4+1-:2])
      2'h0: begin
        out = M_add_out;
      end
      2'h1: begin
        out = M_bool_out;
      end
      2'h2: begin
        out = M_shi_out;
      end
      2'h3: begin
        out = M_comp_out;
      end
    endcase
  end
endmodule
